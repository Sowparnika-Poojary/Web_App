- hosts: dev
  become: yes
  vars:
    docker_image: "{{ docker_username }}/my-python-app1:latest"
  tasks:
    - name: Update apt package index and install Docker if not installed
      apt:
        update_cache: yes
        name: docker.io
        state: present

    - name: Verify Docker installation
      command: docker --version
      register: docker_version

    - debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    - name: Remove old dangling images
      command: docker images --filter "reference={{ docker_image }}" --filter "dangling=true" -q
      register: dangling_images
      ignore_errors: true

    - name: Remove dangling images
      command: docker rmi {{ item }}
      with_items: "{{ dangling_images.stdout_lines }}"
      when: dangling_images.stdout_lines | length > 0
      
    - name: Build Docker image
      docker_image:
        path: .
        name: "{{ docker_image }}"
        tag: latest
        
    - name: Run tests in Docker
      command: docker run --rm {{ docker_image }} pytest -q
      register: pytest_result

    - name: Assert pytest passed
      assert:
        that:
          - pytest_result.rc == 0
        fail_msg: "Pytest failed with return code {{ pytest_result.rc }}."

    - name: Log in to Docker Hub
      docker_login:
        username: "{{ docker_username }}"
        password: "{{ docker_hub_access_token }}"

    - name: Push the Docker image to Docker Hub
      docker_image:
        name: "{{ docker_image }}"
        push: yes

    - name: Check if the container exists
      command: docker ps -a -q -f name=my-python-app1-container
      register: container_check
      ignore_errors: true

    - name: Stop existing container if it exists
      docker_container:
        name: my-python-app1-container
        state: stopped
      when: container_check.stdout != ""

    - name: Remove existing container if it exists
      docker_container:
        name: my-python-app1-container
        state: absent
      when: container_check.stdout != ""

    - name: Run the Docker container
      docker_container:
        name: my-python-app1-container
        image: "{{ docker_image }}"
        state: started
        restart_policy: always
        published_ports:
          - "90:5000"

- hosts: prod
  become: yes
  vars:
    docker_image: "{{ docker_username }}/my-python-app1:latest"

  tasks:
    - name: Update apt package index and install Docker if not installed
      apt:
        update_cache: yes
        name: docker.io
        state: present

    - name: Verify Docker installation
      command: docker --version
      register: docker_version

    - debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    - name: Pull the latest Docker image on PROD server
      docker_image:
        name: "{{ docker_image }}"
        tag: latest
        source: pull

    - name: Check if the container exists
      command: docker ps -a -q -f name=my-python-app1-container-prod
      register: prod_container_check
      ignore_errors: true

    - name: Stop existing container if it exists
      docker_container:
        name: my-python-app1-container-prod
        state: stopped
      when: prod_container_check.stdout != ""

    - name: Remove existing container if it exists
      docker_container:
        name: my-python-app1-container-prod
        state: absent
      when: prod_container_check.stdout != ""

    - name: Run the Docker container on PROD server
      docker_container:
        name: my-python-app1-container-prod
        image: "{{ docker_image }}"
        state: started
        restart_policy: always
        published_ports:
          - "90:5000"