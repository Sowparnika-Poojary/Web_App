- hosts: dev
  become: yes
  vars:
    docker_username: "{{ lookup('env', 'docker_username') }}"
    docker_password: "{{ lookup('env', 'docker_password') }}"
  tasks:
    - name: Update apt package index and install Docker if not installed
      apt:
        update_cache: yes
        name: docker.io
        state: present

    - name: Verify Docker installation
      command: docker --version
      register: docker_version

    - debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    - name: Remove old dangling images
      command: docker images --filter "reference={{ docker_username }}/my-python-app1:latest" --filter "dangling=true" -q
      register: dangling_images
      ignore_errors: true

    - name: Remove dangling images
      command: docker rmi {{ item }}
      with_items: "{{ dangling_images.stdout_lines }}"
      when: dangling_images.stdout_lines | length > 0
      
    - name: Build Docker image
      command: docker build -t "{{ docker_username }}/my-python-app1:latest" /home/ubuntu/python-app
        
    - name: Run pytest in a Docker container
      command: docker run --rm "{{ docker_username }}/my-python-app1:latest" pytest
      register: result

    - name: Display test results
      debug:
        var: result.stdout  

    - name: Log in to Docker Hub
      docker_login:
        username: "{{ docker_username }}"
        password: "{{ docker_password }}"

    - name: Push the Docker image to Docker Hub
      command: docker push "{{ docker_username }}/my-python-app1:latest"

    - name: Check if the container exists
      command: docker ps -a -q -f name=my-python-app1-container
      register: container_check
      ignore_errors: true

    - name: Stop existing container if it exists
      docker_container:
        name: my-python-app1-container
        state: stopped
      when: container_check.stdout != ""

    - name: Remove existing container if it exists
      docker_container:
        name: my-python-app1-container
        state: absent
      when: container_check.stdout != ""

    - name: Run the Docker container
      docker_container:
        name: my-python-app1-container
        image: "{{ docker_username }}/my-python-app1:latest"
        state: started
        restart_policy: always
        published_ports:
          - "90:5000"
